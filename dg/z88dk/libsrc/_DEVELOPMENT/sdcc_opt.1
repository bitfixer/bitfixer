	.module %0
=
	EXTERN __divschar
	EXTERN __divschar_callee
	EXTERN __divsint
	EXTERN __divsint_callee
	EXTERN __divslong
	EXTERN __divslong_callee
	EXTERN __divslonglong
	EXTERN __divslonglong_callee
	EXTERN __divsuchar
	EXTERN __divsuchar_callee
	EXTERN __divuchar
	EXTERN __divuchar_callee
	EXTERN __divuint
	EXTERN __divuint_callee
	EXTERN __divulong
	EXTERN __divulong_callee
	EXTERN __divulonglong
	EXTERN __divulonglong_callee
	EXTERN __divuschar
	EXTERN __divuschar_callee
	EXTERN __modschar
	EXTERN __modschar_callee
	EXTERN __modsint
	EXTERN __modsint_callee
	EXTERN __modslong
	EXTERN __modslong_callee
	EXTERN __modslonglong
	EXTERN __modslonglong_callee
	EXTERN __modsuchar
	EXTERN __modsuchar_callee
	EXTERN __moduchar
	EXTERN __moduchar_callee
	EXTERN __moduint
	EXTERN __moduint_callee
	EXTERN __modulong
	EXTERN __modulong_callee
	EXTERN __modulonglong
	EXTERN __modulonglong_callee
	EXTERN __moduschar
	EXTERN __moduschar_callee
	EXTERN __mulint
	EXTERN __mulint_callee
	EXTERN __mullong
	EXTERN __mullong_callee
	EXTERN __mullonglong
	EXTERN __mullonglong_callee
	EXTERN __mulschar
	EXTERN __mulschar_callee
	EXTERN __mulsuchar
	EXTERN __mulsuchar_callee
	EXTERN __muluschar
	EXTERN __muluschar_callee
	EXTERN __rlslonglong
	EXTERN __rlslonglong_callee
	EXTERN __rlulonglong
	EXTERN __rlulonglong_callee
	EXTERN __rrslonglong
	EXTERN __rrslonglong_callee
	EXTERN __rrulonglong
	EXTERN __rrulonglong_callee
	EXTERN ___sdcc_call_hl
	EXTERN ___sdcc_call_iy
	EXTERN ___sdcc_enter_ix
	EXTERN _banked_call
	EXTERN _banked_ret
	EXTERN ___fs2schar
	EXTERN ___fs2schar_callee
	EXTERN ___fs2sint
	EXTERN ___fs2sint_callee
	EXTERN ___fs2slong
	EXTERN ___fs2slong_callee
	EXTERN ___fs2uchar
	EXTERN ___fs2uchar_callee
	EXTERN ___fs2uint
	EXTERN ___fs2uint_callee
	EXTERN ___fs2ulong
	EXTERN ___fs2ulong_callee
	EXTERN ___fsadd
	EXTERN ___fsadd_callee
	EXTERN ___fsdiv
	EXTERN ___fsdiv_callee
	EXTERN ___fseq
	EXTERN ___fseq_callee
	EXTERN ___fsgt
	EXTERN ___fsgt_callee
	EXTERN ___fslt
	EXTERN ___fslt_callee
	EXTERN ___fsmul
	EXTERN ___fsmul_callee
	EXTERN ___fsneq
	EXTERN ___fsneq_callee
	EXTERN ___fssub
	EXTERN ___fssub_callee
	EXTERN ___schar2fs
	EXTERN ___schar2fs_callee
	EXTERN ___sint2fs
	EXTERN ___sint2fs_callee
	EXTERN ___slong2fs
	EXTERN ___slong2fs_callee
	EXTERN ___uchar2fs
	EXTERN ___uchar2fs_callee
	EXTERN ___uint2fs
	EXTERN ___uint2fs_callee
	EXTERN ___ulong2fs
	EXTERN ___ulong2fs_callee

;;
;; global labels
;;

%0::
=
%0:

;;
;; labels
;;

%"[0-9]+"0$:
=
__sdcc_local_%0:

	%"[0-9]+"0$:
=
	__sdcc_local_%0:

%0$:
=
%0:

	%0$:
=
	%0:

	%1, %"[0-9]+"0$
=
	%1, __sdcc_local_%0

	%0,%"[0-9]+"1$
=
	%0,__sdcc_local_%1

	%0	%"[0-9]+"1$
=
	%0	__sdcc_local_%1

	%1, %0$
=
	%1, %0

	%0,%1$
=
	%0,%1

	%0	%1$
=
	%0	%1

;;
;; sections
;;

	.area _XSEG
=
	SECTION IGNORE

	.area _STACK
=
	SECTION IGNORE

	.area _CODE_%0
=
	SECTION code_compiler_bank_%0

	.area _CODE
=
	SECTION code_compiler

	.area _DATA
=
	SECTION bss_compiler

	.area _RSEG (ABS)
=
	SECTION IGNORE

	.area _GSINIT
=
	SECTION code_crt_init

	.area _GSFINAL
=
	SECTION code_crt_exit

	.area _HOME
=
	SECTION IGNORE

	.area _CABS (ABS)
=
	SECTION IGNORE

	.area _DABS (ABS)
=
	SECTION IGNORE

	.area _INITIALIZER
=
	SECTION data_compiler

	.area _INITIALIZED
=
	
IF 0
	
; .area _INITIALIZED removed by z88dk
	

IF 0
=
%activate
;--------------------------------------------------------
; absolute external ram data
;--------------------------------------------------------
=
%once
	
ENDIF
	
;--------------------------------------------------------
; absolute external ram data
;--------------------------------------------------------

	.area %0
=
	SECTION %0

;;
;; assembler directives
;;

	.ascii %0
=
	DEFM %0

	.ds %0
=
	DEFS %0

	.db %0
=
	DEFB %0

	.byte %0
=
	DEFB %0

	.dw %0
=
	DEFW %0

	.globl %0
=
	GLOBAL %0

	.org %0
=
	org %0

;;
;; label = PC
;;

	%0 = .
=
	%0:

;;
;; define constants
;;

%0	=	%1
=
defc %0	= %1

	%0	=	%1
=
	defc %0 = %1

;;
;; asxxx syntax for LSB / MSB
;;

	%1#<(%0)
=
	%1#(%0 & 0xFF)

	%1#>(%0)
=
	%1#(%0 / 256)

	%1<((%0))
=
	%1#((%0) & 0xFF)

	%1>((%0))
=
	%1#((%0) / 256)

;;
;; zilog syntax for index registers
;;

	%0,%1 (ix)
=
	%0,(ix+%1)

	%0, %1 (ix)
=
	%0,(ix+%1)

	%2	%1 (ix),%0
=
	%2	(ix+%1),%0

	%2	%1 (ix)
=
	%2	(ix+%1)

	%0,%1 (iy)
=
	%0,(iy+%1)

	%0, %1 (iy)
=
	%0,(iy+%1)

	%2	%1 (iy),%0
=
	%2	(iy+%1),%0

	%2	%1 (iy)
=
	%2	(iy+%1)

;;
;; _INITIALIZER variables made into actual variable names
;;

__xinit_%0
=
%0

;;
;; asxxx immediate operator #
;;

	%"[^\"'#;]*"0#%1
=
	%0+%1

;;
;; beautify
;;

%"[^\"';+]*"0+-%1
=
%0-%1

%"[^\"';,]*"0,%"[ ]*"+%"[^(]"1%2
=
%0,%1%2

%"[^\"';(]*"0(+%1
=
%0(%1
